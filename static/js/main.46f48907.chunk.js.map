{"version":3,"sources":["Components/ProgressModal.js","Components/Compiler/Compiler2.js","App.js","serviceWorker.js","index.js"],"names":["ProgressModal","className","role","aria-valuenow","aria-valuemin","aria-valuemax","style","width","Compiler2","useState","code","setCode","input","setInput","openModal","setOpenModal","codeSubmitHandler","e","a","preventDefault","outputText","document","getElementById","innerHTML","fetch","method","headers","accept","body","JSON","stringify","source_code","stdin","language_id","response","json","jsonResponse","console","log","jsonGetSolution","status","description","stderr","compile_output","token","url","getSolution","stdout","output","atob","time","memory","error","compilation_error","display","id","onSubmit","htmlFor","rows","onChange","event","target","value","placeholder","type","onClick","readOnly","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uUAWeA,G,YARK,WAClB,OACE,yBAAKC,UAAU,YACjB,yBAAKA,UAAU,0DAA0DC,KAAK,cAAcC,gBAAc,MAAMC,gBAAc,IAAIC,gBAAc,MAAMC,MAAO,CAACC,MAAO,SAAS,+C,uBCsIjKC,EArIG,WAAO,IAAD,EACCC,mBAAS,IADV,mBACbC,EADa,KACRC,EADQ,OAEGF,mBAAS,IAFZ,mBAEbG,EAFa,KAEPC,EAFO,OAGUJ,oBAAS,GAHnB,mBAGdK,EAHc,KAGJC,EAHI,KAkBdC,EAAiB,uCAAG,WAAOC,GAAP,+BAAAC,EAAA,6DACxBD,EAAEE,kBACEC,EAAaC,SAASC,eAAe,WAC9BC,UAAY,GACvBH,EAAWG,WAAa,4BAJA,SAKDC,MACrB,+CACA,CACEC,OAAQ,OACRC,QAAS,CACP,kBAAmB,2BACnB,iBAAkB,qDAClB,eAAgB,mBAChBC,OAAQ,oBAEVC,KAAMC,KAAKC,UAAU,CACnBC,YAAYrB,EACZsB,MAAOpB,EACPqB,YAAa,OAlBK,cAKlBC,EALkB,OAsBxBd,EAAWG,WAAa,2BAtBA,UAwBGW,EAASC,OAxBZ,QAwBlBC,EAxBkB,OAyBtBC,QAAQC,IAAIF,GACVG,EAAkB,CACpBC,OAAQ,CAAEC,YAAa,SACvBC,OAAQ,KACRC,eAAgB,MA7BM,WAiCiB,aAAvCJ,EAAgBC,OAAOC,aACG,MAA1BF,EAAgBG,QACkB,MAAlCH,EAAgBI,eAnCM,oBAqCtBvB,EAAWG,UAAX,iGAAiHgB,EAAgBC,OAAOC,cACpIL,EAAaQ,MAtCK,wBAuChBC,EAvCgB,uDAuCsCT,EAAaQ,MAvCnD,kCAyCMpB,MAAMqB,EAAK,CACnCpB,OAAQ,MACRC,QAAS,CACP,kBAAmB,2BACnB,iBAAkB,qDAClB,eAAgB,sBA9CA,eAyCdoB,EAzCc,iBAkDIA,EAAYX,OAlDhB,QAkDpBI,EAlDoB,OAmDpBF,QAAQC,IAAIC,GAnDQ,gCAsDpBA,EAAgBQ,QACZC,EAASC,KAAKV,EAAgBQ,QAEpC3B,EAAWG,UAAY,GACvBR,GAAa,GACbK,EAAWG,WAAX,qBAAsCyB,EAAtC,8BAAkET,EAAgBW,KAAlF,gCAA8GX,EAAgBY,OAA9H,WACSZ,EAAgBG,QACnBU,EAAQH,KAAKV,EAAgBG,QAEnCtB,EAAWG,UAAY,GAEvBH,EAAWG,WAAX,oBAAqC6B,KAE/BC,EAAoBJ,KAAKV,EAAgBI,gBAE/CvB,EAAWG,UAAY,GAEvBH,EAAWG,WAAX,oBAAqC8B,IAvEf,4CAAH,sDA0EzB,OACI,oCACCvC,GAAa,kBAAC,EAAD,MACb,iDACD,yBAAKb,UAAU,SAEjB,yBAAKA,UAAU,QACb,yBAAKK,MAAO,CAACgD,QAAQ,SAArB,aACQ,kBAAC,IAAD,CAAYrD,UAAU,UAE5B,yBAAKA,UAAU,aAAf,8FAML,0BAAMsD,GAAG,OAAOC,SAAUxC,GACzB,yBAAKf,UAAU,cACjB,2BAAOwD,QAAQ,8BAA8BxD,UAAU,WAAvD,aAA2E,kBAAC,IAAD,OAC3E,8BAAUA,UAAU,yBAAyBsD,GAAG,8BAA8BG,KAAK,KAAKC,SAlGpE,SAACC,GACfjD,EAAQiD,EAAMC,OAAOC,QAiGqFC,YAAY,0BAG9H,4BAASC,KAAK,SAAS/D,UAAU,kBAAkBgE,QA7GxB,WACrBlD,GAAa,KA4GnB,QAEA,yBAAKd,UAAU,cACb,2BAAOwD,QAAQ,8BAA8BxD,UAAU,WAAvD,UAAwE,kBAAC,IAAD,OACxE,8BAAUA,UAAU,yBAAyBsD,GAAG,SAASG,KAAK,KAAMK,YAAY,0BAA0BG,UAAQ,MAIlH,yBAAKjE,UAAU,cACf,8BAAUA,UAAU,0BAA0BsD,GAAG,8BAA8BG,KAAK,KAAKC,SAlHpE,SAACC,GAClB/C,EAAS+C,EAAMC,OAAOC,QAiHuFC,YAAY,wBChI1GI,E,uKAKjB,OACE,oCACE,kBAAC,EAAD,W,GAPyBC,aCUbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASC,eAAe,SDyHpB,kBAAmBuD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLf,QAAQe,MAAMA,EAAMgC,c","file":"static/js/main.46f48907.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport \"./ProgressModal.css\";\r\n\r\nconst ProgressModal=()=> {\r\n  return (\r\n    <div className=\"progress\">\r\n  <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: \"100%\"}}><b>Compiling...</b></div>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default ProgressModal;","import React,{useState} from 'react'\r\nimport './Compiler2.css'\r\nimport ProgressModal from '../ProgressModal'\r\nimport {BsQuestion} from 'react-icons/bs'\r\nimport {GrCode} from 'react-icons/gr'\r\nimport {RiFileCodeFill} from 'react-icons/ri'\r\n\r\nconst Compiler2 = () => {\r\n    const [code,setCode]=useState('');\r\n    const [input,setInput]=useState('');\r\n    const[openModal,setOpenModal]=useState(false);\r\n\r\n    const openModalHandler=()=>{\r\n      setOpenModal(true);\r\n    }\r\n\r\n    const inputHandler=(event)=>{\r\n      setInput(event.target.value);\r\n    }\r\n\r\n    const codeHandler=(event)=>{\r\n        setCode(event.target.value);\r\n    }\r\n    \r\n\r\n    const codeSubmitHandler = async (e) => {\r\n      e.preventDefault();\r\n      let outputText = document.getElementById(\"output\");\r\n      outputText.innerHTML = \"\";\r\n      outputText.innerHTML += \"Creating Submission ...\\n\";\r\n      const response = await fetch(\r\n        \"https://judge0-ce.p.rapidapi.com/submissions\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": \"94b475ec9emsh55e6ca06218f4fep112d7djsn672f4a23e235\", // Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/\r\n            \"content-type\": \"application/json\",\r\n            accept: \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            source_code:code,\r\n            stdin: input,\r\n            language_id: 50,\r\n          }),\r\n        }\r\n      );\r\n      outputText.innerHTML += \"Submission Created ...\\n\";\r\n\r\n      const jsonResponse = await response.json();\r\n        console.log(jsonResponse);\r\n      let jsonGetSolution = {\r\n        status: { description: \"Queue\" },\r\n        stderr: null,\r\n        compile_output: null,\r\n      };\r\n  \r\n      while (\r\n        jsonGetSolution.status.description !== \"Accepted\" &&\r\n        jsonGetSolution.stderr == null &&\r\n        jsonGetSolution.compile_output == null\r\n      ) {\r\n        outputText.innerHTML = `Creating Submission ... \\nSubmission Created ...\\nChecking Submission Status\\nstatus : ${jsonGetSolution.status.description}`;\r\n        if (jsonResponse.token) {\r\n          let url = `https://judge0-ce.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;\r\n  \r\n          const getSolution = await fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n              \"x-rapidapi-key\": \"94b475ec9emsh55e6ca06218f4fep112d7djsn672f4a23e235\", // Get yours for free at https://rapidapi.com/judge0-official/api/judge0-ce/\r\n              \"content-type\": \"application/json\",\r\n            },\r\n          });\r\n  \r\n          jsonGetSolution = await getSolution.json();\r\n          console.log(jsonGetSolution);\r\n        }\r\n      }\r\n      if (jsonGetSolution.stdout) {\r\n        const output = atob(jsonGetSolution.stdout);\r\n  \r\n        outputText.innerHTML = \"\";\r\n        setOpenModal(false);\r\n        outputText.innerHTML += `Results :\\n${output}\\nExecution Time : ${jsonGetSolution.time} Secs\\nMemory used : ${jsonGetSolution.memory} bytes`;\r\n      } else if (jsonGetSolution.stderr) {\r\n        const error = atob(jsonGetSolution.stderr);\r\n  \r\n        outputText.innerHTML = \"\";\r\n  \r\n        outputText.innerHTML += `\\n Error :${error}`;\r\n      } else {\r\n        const compilation_error = atob(jsonGetSolution.compile_output);\r\n  \r\n        outputText.innerHTML = \"\";\r\n  \r\n        outputText.innerHTML += `\\n Error :${compilation_error}`;\r\n      }\r\n    };\r\n  return (\r\n      <>\r\n      {openModal && <ProgressModal />}\r\n       <h1>ONLINE C COMPILER</h1>\r\n      <div className='items'>\r\n  \r\n    <div className=\"card\">\r\n      <div style={{display:\"flex\"}}>\r\n    Question: <BsQuestion className='ques' />\r\n    </div>\r\n        <div className=\"card-body\">\r\n         Write a program in C to take an integer from the user as an input and print its factorial\r\n        </div>\r\n       \r\n    </div>\r\n    \r\n   <form id=\"form\" onSubmit={codeSubmitHandler}>\r\n    <div className=\"form-group\">\r\n  <label htmlFor=\"exampleFormControlTextarea1\" className='label-1'>Code Here <GrCode /></label>\r\n  <textarea className=\"form-control rounded-0\" id=\"exampleFormControlTextarea1\" rows=\"10\" onChange={codeHandler}  placeholder='Enter Your Code here'>\r\n  </textarea>\r\n</div>\r\n<button  type=\"submit\" className=\"btn btn-primary\" onClick={openModalHandler}>Run</button>\r\n</form>\r\n<div className=\"form-group\">\r\n  <label htmlFor=\"exampleFormControlTextarea2\" className='label-1'>Output <RiFileCodeFill /></label>\r\n  <textarea className=\"form-control rounded-0\" id=\"output\" rows=\"10\"  placeholder='Output will appear here' readOnly> \r\n  </textarea>\r\n</div>\r\n  </div>\r\n  <div className=\"form-group\">\r\n  <textarea className=\"form-control2 rounded-0\" id=\"exampleFormControlTextarea1\" rows=\"10\" onChange={inputHandler} placeholder=\"Enter Input here\"></textarea>\r\n</div>\r\n\r\n\r\n   \r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Compiler2\r\n","import React, { Component ,useState} from \"react\";\nimport Compiler2 from \"./Components/Compiler/Compiler2\";\nexport default class App extends Component {\n  render() {\n\n   \n\n    return (\n      <>\n        <Compiler2 />\n        \n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}